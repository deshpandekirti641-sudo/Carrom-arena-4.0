'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { ArenaZone } from './ArenaZone'
import { NavigationPanel } from './NavigationPanel'
import type { ArenaFacility, ArenaSection, PlayerLocation } from '@/types/arena'

interface ArenaMapProps {
  currentPlayerLocation?: PlayerLocation
  onZoneClick?: (zoneId: string) => void
  showNavigation?: boolean
}

const arenaFacilities: ArenaFacility[] = [
  {
    id: 'main-hall',
    name: 'Main Gaming Hall',
    type: 'gaming',
    description: 'Premium Carrom gaming tables with live streaming',
    capacity: 240,
    tables: 30,
    coordinates: { x: 40, y: 25, width: 35, height: 40 },
    amenities: ['AC Climate Control', '4K Cameras', 'LED Lighting', 'Sound System'],
    operatingHours: '24/7',
    bookingRequired: false,
    prizePool: '‚Çπ50,000 - ‚Çπ5,00,000',
    status: 'active'
  },
  {
    id: 'vip-lounge',
    name: 'VIP Gaming Lounge',
    type: 'vip',
    description: 'Exclusive high-stakes Carrom matches',
    capacity: 48,
    tables: 6,
    coordinates: { x: 5, y: 5, width: 25, height: 15 },
    amenities: ['Personal Butler', 'Premium Snacks', 'Private Streaming', 'Concierge'],
    operatingHours: '10:00 AM - 2:00 AM',
    bookingRequired: true,
    prizePool: '‚Çπ1,00,000 - ‚Çπ20,00,000',
    status: 'active'
  },
  {
    id: 'training-center',
    name: 'Training Academy',
    type: 'training',
    description: 'Professional coaching and skill development',
    capacity: 80,
    tables: 10,
    coordinates: { x: 80, y: 5, width: 18, height: 25 },
    amenities: ['Pro Coaches', 'Analysis Tools', 'Practice Equipment', 'Video Review'],
    operatingHours: '6:00 AM - 10:00 PM',
    bookingRequired: true,
    prizePool: 'Coaching Fees: ‚Çπ500/hour',
    status: 'active'
  },
  {
    id: 'tournament-arena',
    name: 'Tournament Arena',
    type: 'tournament',
    description: 'Championship matches and competitions',
    capacity: 500,
    tables: 4,
    coordinates: { x: 25, y: 70, width: 50, height: 25 },
    amenities: ['Stadium Seating', 'Live Commentary', 'HD Broadcast', 'Trophy Display'],
    operatingHours: 'Event Based',
    bookingRequired: true,
    prizePool: '‚Çπ10,00,000 - ‚Çπ1,00,00,000',
    status: 'maintenance'
  },
  {
    id: 'wallet-center',
    name: 'Wallet & Banking Center',
    type: 'service',
    description: 'Financial transactions and account management',
    capacity: 20,
    tables: 0,
    coordinates: { x: 5, y: 35, width: 15, height: 20 },
    amenities: ['UPI Support', 'Net Banking', 'Cash Deposits', '24/7 Support'],
    operatingHours: '24/7',
    bookingRequired: false,
    prizePool: 'Transaction Limits: ‚Çπ10 - ‚Çπ2,000',
    status: 'active'
  },
  {
    id: 'food-court',
    name: 'Gaming Caf√©',
    type: 'amenity',
    description: 'Refreshments and gaming snacks',
    capacity: 100,
    tables: 0,
    coordinates: { x: 80, y: 35, width: 18, height: 30 },
    amenities: ['Indian Cuisine', 'Quick Bites', 'Beverages', 'Gaming Fuel'],
    operatingHours: '8:00 AM - 12:00 AM',
    bookingRequired: false,
    prizePool: 'Menu: ‚Çπ50 - ‚Çπ500',
    status: 'active'
  },
  {
    id: 'admin-center',
    name: 'Control Center',
    type: 'admin',
    description: 'Arena management and operations',
    capacity: 15,
    tables: 0,
    coordinates: { x: 5, y: 80, width: 15, height: 15 },
    amenities: ['Security Hub', 'Operations Room', 'IT Support', 'Management Office'],
    operatingHours: '24/7',
    bookingRequired: false,
    prizePool: 'Staff Only',
    status: 'active'
  }
]

const arenaStats = {
  totalCapacity: 1003,
  totalTables: 50,
  activeZones: 6,
  dailyMatches: 450,
  totalPrizePool: '‚Çπ2,50,00,000',
  averageWaitTime: '3 minutes'
}

export function ArenaMap({ currentPlayerLocation, onZoneClick, showNavigation = true }: ArenaMapProps): JSX.Element {
  const [selectedZone, setSelectedZone] = useState<string | null>(null)
  const [viewMode, setViewMode] = useState<'floor-plan' | '3d' | 'interactive'>('floor-plan')
  const [isLoading, setIsLoading] = useState<boolean>(true)

  useEffect(() => {
    // Simulate loading arena data
    const timer = setTimeout(() => setIsLoading(false), 1000)
    return () => clearTimeout(timer)
  }, [])

  const handleZoneClick = (zoneId: string): void => {
    setSelectedZone(zoneId)
    onZoneClick?.(zoneId)
  }

  const getZoneStatusColor = (status: string): string => {
    switch (status) {
      case 'active':
        return 'bg-green-500'
      case 'maintenance':
        return 'bg-yellow-500'
      case 'closed':
        return 'bg-red-500'
      default:
        return 'bg-gray-500'
    }
  }

  const selectedFacility = selectedZone ? arenaFacilities.find(f => f.id === selectedZone) : null

  if (isLoading) {
    return (
      <Card className="w-full h-96 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading Arena Map...</p>
        </div>
      </Card>
    )
  }

  return (
    <div className="w-full space-y-6">
      {/* Arena Header */}
      <Card className="bg-gradient-to-r from-blue-900 to-purple-900 text-white">
        <CardHeader>
          <div className="flex justify-between items-center">
            <div>
              <CardTitle className="text-3xl font-bold">üèüÔ∏è Carrom Arena Building Map</CardTitle>
              <p className="text-blue-100 mt-2">Premium Real-Money Gaming Facility - Mumbai, India</p>
            </div>
            <div className="text-right">
              <div className="text-2xl font-bold text-yellow-400">{arenaStats.totalCapacity}</div>
              <p className="text-sm text-blue-200">Total Capacity</p>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-6 gap-4">
            <div className="text-center">
              <div className="text-xl font-bold text-green-400">{arenaStats.totalTables}</div>
              <p className="text-xs text-gray-300">Gaming Tables</p>
            </div>
            <div className="text-center">
              <div className="text-xl font-bold text-blue-400">{arenaStats.activeZones}</div>
              <p className="text-xs text-gray-300">Active Zones</p>
            </div>
            <div className="text-center">
              <div className="text-xl font-bold text-purple-400">{arenaStats.dailyMatches}</div>
              <p className="text-xs text-gray-300">Daily Matches</p>
            </div>
            <div className="text-center">
              <div className="text-xl font-bold text-yellow-400">{arenaStats.totalPrizePool}</div>
              <p className="text-xs text-gray-300">Prize Pool</p>
            </div>
            <div className="text-center">
              <div className="text-xl font-bold text-red-400">{arenaStats.averageWaitTime}</div>
              <p className="text-xs text-gray-300">Avg. Wait</p>
            </div>
            <div className="text-center">
              <div className="text-xl font-bold text-orange-400">24/7</div>
              <p className="text-xs text-gray-300">Operating</p>
            </div>
          </div>
        </CardContent>
      </Card>

      <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as any)}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="floor-plan">üèóÔ∏è Floor Plan</TabsTrigger>
          <TabsTrigger value="3d">üè¢ 3D View</TabsTrigger>
          <TabsTrigger value="interactive">üéÆ Interactive</TabsTrigger>
        </TabsList>

        <TabsContent value="floor-plan" className="mt-6">
          <Card className="w-full">
            <CardContent className="p-6">
              {/* Floor Plan SVG */}
              <div className="relative w-full h-96 bg-gray-100 rounded-lg overflow-hidden border-2 border-gray-300">
                <svg
                  viewBox="0 0 100 100"
                  className="w-full h-full"
                  style={{ background: 'linear-gradient(45deg, #f3f4f6 25%, transparent 25%), linear-gradient(-45deg, #f3f4f6 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f3f4f6 75%), linear-gradient(-45deg, transparent 75%, #f3f4f6 75%)', backgroundSize: '20px 20px', backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px' }}
                >
                  {/* Arena Boundary */}
                  <rect x="1" y="1" width="98" height="98" fill="none" stroke="#1f2937" strokeWidth="0.5" />
                  
                  {/* Facility Zones */}
                  {arenaFacilities.map((facility) => (
                    <ArenaZone
                      key={facility.id}
                      facility={facility}
                      isSelected={selectedZone === facility.id}
                      onClick={() => handleZoneClick(facility.id)}
                      currentPlayerLocation={currentPlayerLocation}
                    />
                  ))}

                  {/* Pathways */}
                  <g stroke="#6b7280" strokeWidth="0.3" fill="none">
                    {/* Main corridor */}
                    <path d="M 35 35 L 35 65 L 75 65 L 75 35 Z" strokeDasharray="2,2" />
                    {/* Entry/Exit paths */}
                    <circle cx="50" cy="2" r="1" fill="#ef4444" />
                    <text x="50" y="6" textAnchor="middle" fontSize="2" fill="#ef4444">MAIN ENTRANCE</text>
                    
                    <circle cx="2" cy="50" r="1" fill="#22c55e" />
                    <text x="8" y="52" fontSize="2" fill="#22c55e">VIP ENTRANCE</text>

                    <circle cx="98" cy="50" r="1" fill="#f59e0b" />
                    <text x="92" y="52" fontSize="2" fill="#f59e0b">SERVICE</text>
                  </g>

                  {/* Legend */}
                  <g transform="translate(2, 2)">
                    <rect width="25" height="12" fill="rgba(255,255,255,0.95)" stroke="#d1d5db" strokeWidth="0.1" rx="0.5" />
                    <text x="1" y="3" fontSize="1.5" fill="#1f2937" fontWeight="bold">LEGEND</text>
                    
                    <circle cx="2" cy="5" r="0.5" fill="#10b981" />
                    <text x="3.5" y="5.5" fontSize="1" fill="#1f2937">Active</text>
                    
                    <circle cx="2" cy="7" r="0.5" fill="#f59e0b" />
                    <text x="3.5" y="7.5" fontSize="1" fill="#1f2937">Maintenance</text>
                    
                    <circle cx="2" cy="9" r="0.5" fill="#ef4444" />
                    <text x="3.5" y="9.5" fontSize="1" fill="#1f2937">Closed</text>

                    <rect x="12" y="4.5" width="1" height="1" fill="#3b82f6" />
                    <text x="14" y="5.5" fontSize="1" fill="#1f2937">Gaming</text>
                    
                    <rect x="12" y="6.5" width="1" height="1" fill="#8b5cf6" />
                    <text x="14" y="7.5" fontSize="1" fill="#1f2937">VIP</text>
                    
                    <rect x="12" y="8.5" width="1" height="1" fill="#06b6d4" />
                    <text x="14" y="9.5" fontSize="1" fill="#1f2937">Service</text>
                  </g>
                </svg>

                {/* Current Player Location */}
                {currentPlayerLocation && (
                  <div
                    className="absolute w-3 h-3 bg-red-500 rounded-full animate-pulse border-2 border-white shadow-lg"
                    style={{
                      left: `${currentPlayerLocation.x}%`,
                      top: `${currentPlayerLocation.y}%`,
                      transform: 'translate(-50%, -50%)'
                    }}
                  >
                    <div className="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-2 py-1 rounded text-xs whitespace-nowrap">
                      You are here
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="3d" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>3D Arena View</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="w-full h-96 bg-gradient-to-b from-sky-200 to-gray-100 rounded-lg flex items-center justify-center border-2 border-gray-300 relative overflow-hidden">
                {/* 3D Isometric View */}
                <div className="relative w-full h-full" style={{ perspective: '1000px' }}>
                  <div className="absolute inset-0" style={{ transform: 'rotateX(60deg) rotateY(-30deg)', transformStyle: 'preserve-3d' }}>
                    {/* Floor */}
                    <div className="absolute w-80 h-80 bg-gradient-to-br from-gray-300 to-gray-500 rounded-lg" style={{ transform: 'translateZ(-20px)' }} />
                    
                    {/* Building blocks */}
                    <div className="absolute w-32 h-24 bg-blue-600" style={{ left: '100px', top: '80px', height: '60px', transform: 'translateZ(30px)' }}>
                      <div className="absolute -top-2 left-1/2 transform -translate-x-1/2 text-white text-xs font-bold">Main Hall</div>
                    </div>
                    
                    <div className="absolute w-20 h-16 bg-purple-600" style={{ left: '20px', top: '20px', height: '40px', transform: 'translateZ(40px)' }}>
                      <div className="absolute -top-2 left-1/2 transform -translate-x-1/2 text-white text-xs font-bold">VIP</div>
                    </div>
                    
                    <div className="absolute w-16 h-20 bg-green-600" style={{ left: '250px', top: '40px', height: '35px', transform: 'translateZ(25px)' }}>
                      <div className="absolute -top-2 left-1/2 transform -translate-x-1/2 text-white text-xs font-bold">Training</div>
                    </div>
                    
                    <div className="absolute w-28 h-18 bg-red-600" style={{ left: '80px', top: '200px', height: '45px', transform: 'translateZ(35px)' }}>
                      <div className="absolute -top-2 left-1/2 transform -translate-x-1/2 text-white text-xs font-bold">Tournament</div>
                    </div>
                  </div>
                </div>
                
                <div className="absolute bottom-4 right-4 bg-white/90 rounded-lg p-3 text-sm">
                  <p className="font-semibold">3D Arena Overview</p>
                  <p className="text-gray-600">Interactive 3D model</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="interactive" className="mt-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Interactive Map */}
            <div className="lg:col-span-2">
              <Card>
                <CardHeader>
                  <CardTitle>Live Arena Status</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {arenaFacilities.map((facility) => (
                      <Button
                        key={facility.id}
                        variant={selectedZone === facility.id ? "default" : "outline"}
                        className="h-20 flex flex-col items-center justify-center text-sm relative"
                        onClick={() => handleZoneClick(facility.id)}
                      >
                        <div className={`absolute top-1 right-1 w-2 h-2 rounded-full ${getZoneStatusColor(facility.status)}`} />
                        <div className="font-semibold">{facility.name}</div>
                        <div className="text-xs text-gray-500">{facility.tables} Tables</div>
                        <Badge variant="secondary" className="text-xs mt-1">
                          {facility.capacity} Cap
                        </Badge>
                      </Button>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Navigation Panel */}
            {showNavigation && (
              <div>
                <NavigationPanel
                  facilities={arenaFacilities}
                  selectedFacility={selectedFacility}
                  onFacilitySelect={(facilityId) => handleZoneClick(facilityId)}
                />
              </div>
            )}
          </div>
        </TabsContent>
      </Tabs>

      {/* Selected Zone Details */}
      {selectedFacility && (
        <Card className="mt-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <span className={`w-3 h-3 rounded-full ${getZoneStatusColor(selectedFacility.status)}`} />
              {selectedFacility.name}
              <Badge variant="secondary">{selectedFacility.type}</Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div>
                <p className="text-sm text-gray-600">Description</p>
                <p className="font-medium">{selectedFacility.description}</p>
              </div>
              <div>
                <p className="text-sm text-gray-600">Capacity</p>
                <p className="font-medium">{selectedFacility.capacity} Players</p>
              </div>
              <div>
                <p className="text-sm text-gray-600">Operating Hours</p>
                <p className="font-medium">{selectedFacility.operatingHours}</p>
              </div>
              <div>
                <p className="text-sm text-gray-600">Prize Pool / Rates</p>
                <p className="font-medium text-green-600">{selectedFacility.prizePool}</p>
              </div>
            </div>
            
            <div className="mt-4">
              <p className="text-sm text-gray-600 mb-2">Amenities</p>
              <div className="flex flex-wrap gap-2">
                {selectedFacility.amenities.map((amenity, index) => (
                  <Badge key={index} variant="outline">
                    {amenity}
                  </Badge>
                ))}
              </div>
            </div>

            <div className="mt-4 flex gap-2">
              <Button size="sm" className="bg-blue-600 hover:bg-blue-700">
                Navigate Here
              </Button>
              {selectedFacility.bookingRequired && (
                <Button size="sm" variant="outline">
                  Book Now
                </Button>
              )}
              <Button size="sm" variant="outline">
                View Live Stream
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}